
var B64_KEYCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";


function indexof(str, ch)
{
    var i = 0;
    for(i=0; i<str.length; i++)
    {
        if(str[i] == ch)
        {
            return i;
        }
    }
    return -1;
}

function strfromcharcode(n)
{
    return String.fromCharCode(n);
}

function strcharat(str, idx)
{
    return str.charCodeAt(idx);
}

function util_utf8_encode(string)
{
    var utftext = "";
    for (var n = 0; n < string.length; n++)
    {
        var c = strcharat(string, n);
        if (c < 128)
        {
            utftext += strfromcharcode(c);
        }
        else if((c > 127) && (c < 2048))
        {
            utftext += strfromcharcode((c >> 6) | 192);
            utftext += strfromcharcode((c & 63) | 128);
        }
        else
        {
            utftext += strfromcharcode((c >> 12) | 224);
            utftext += strfromcharcode(((c >> 6) & 63) | 128);
            utftext += strfromcharcode((c & 63) | 128);
        }
    }
    return utftext;
}

function util_utf8_decode(utftext)
{
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;
    while ( i < utftext.length )
    {
        c = strcharat(utftext, i);
        if (c < 128)
        {
            string += strfromcharcode(c);
            i++;
        }
        else if((c > 191) && (c < 224))
        {
            c2 = strcharat(utftext, i+1);
            string += strfromcharcode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        }
        else
        {
            c2 = strcharat(utftext, i+1);
            c3 = strcharat(utftext, i+2);
            string += strfromcharcode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }
    }
    return string;
}

function b64encode(input)
{
    var output = "";
    var i = 0;
    input = util_utf8_encode(input);
    while (i < input.length)
    {
        var chr1 = strcharat(input, i++);
        var chr2 = strcharat(input, i++);
        var chr3 = strcharat(input, i++);
        var enc1 = chr1 >> 2;
        var enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        var enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        var enc4 = chr3 & 63;
        //if (isNaN(chr2 != chr2)
        if(chr2 != chr2)
        {
            enc3 = enc4 = 64;
        }
        //else if (isNaN(chr3))
        else if(chr3 != chr3)
        {
            enc4 = 64;
        }
        output = output + B64_KEYCHARS.charAt(enc1) + B64_KEYCHARS.charAt(enc2) + B64_KEYCHARS.charAt(enc3) + B64_KEYCHARS.charAt(enc4);
    }

    return output;
}

function b64decode(input)
{
    var output = "";
    var i = 0;
    while (i < input.length)
    {
        var enc1 = indexof(B64_KEYCHARS, input.charAt(i++));
        var enc2 = indexof(B64_KEYCHARS, input.charAt(i++));
        var enc3 = indexof(B64_KEYCHARS, input.charAt(i++));
        var enc4 = indexof(B64_KEYCHARS, input.charAt(i++));
        var chr1 = (enc1 << 2) | (enc2 >> 4);
        var chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        var chr3 = ((enc3 & 3) << 6) | enc4;
        output = output + strfromcharcode(chr1);
        if (enc3 != 64)
        {
            output = output + strfromcharcode(chr2);
        }
        if (enc4 != 64)
        {
            output = output + strfromcharcode(chr3);
        }
    }
    output = util_utf8_decode(output);
    return output;
}



// define the string
const string = "Learning JavaScript";

// encode the String
const encs = b64encode(string);
println(encs);

// decode the String

//const decs = b64decode(encs);
//println(decs);

