/* ccast.c */
void tin_exprlist_init(TinAstExprList *array);
void tin_exprlist_destroy(TinState *state, TinAstExprList *array);
void tin_exprlist_push(TinState *state, TinAstExprList *array, TinAstExpression *value);
size_t tin_exprlist_count(TinAstExprList *array);
TinAstExpression *tin_exprlist_get(TinAstExprList *array, size_t i);
void tin_paramlist_init(TinAstParamList *array);
void tin_paramlist_destroy(TinState *state, TinAstParamList *array);
void tin_paramlist_push(TinState *state, TinAstParamList *array, TinAstParameter value);
void tin_paramlist_destroyvalues(TinState *state, TinAstParamList *parameters);
void tin_ast_destroyexprlist(TinState *state, TinAstExprList *expressions);
void tin_ast_destroystmtlist(TinState *state, TinAstExprList *statements);
void tin_ast_destroyexpression(TinState *state, TinAstExpression *expression);
TinAstLiteralExpr *tin_ast_make_literalexpr(TinState *state, size_t line, TinValue value);
TinAstBinaryExpr *tin_ast_make_binaryexpr(TinState *state, size_t line, TinAstExpression *left, TinAstExpression *right, TinAstTokType op);
TinAstUnaryExpr *tin_ast_make_unaryexpr(TinState *state, size_t line, TinAstExpression *right, TinAstTokType op);
TinAstVarExpr *tin_ast_make_varexpr(TinState *state, size_t line, const char *name, size_t length);
TinAstAssignExpr *tin_ast_make_assignexpr(TinState *state, size_t line, TinAstExpression *to, TinAstExpression *value);
TinAstCallExpr *tin_ast_make_callexpr(TinState *state, size_t line, TinAstExpression *callee);
TinAstGetExpr *tin_ast_make_getexpr(TinState *state, size_t line, TinAstExpression *where, const char *name, size_t length, bool questionable, bool ignoreresult);
TinAstSetExpr *tin_ast_make_setexpr(TinState *state, size_t line, TinAstExpression *where, const char *name, size_t length, TinAstExpression *value);
TinAstFunctionExpr *tin_ast_make_lambdaexpr(TinState *state, size_t line);
TinAstArrayExpr *tin_ast_make_arrayexpr(TinState *state, size_t line);
TinAstObjectExpr *tin_ast_make_objectexpr(TinState *state, size_t line);
TinAstIndexExpr *tin_ast_make_subscriptexpr(TinState *state, size_t line, TinAstExpression *array, TinAstExpression *index);
TinAstThisExpr *tin_ast_make_thisexpr(TinState *state, size_t line);
TinAstSuperExpr *tin_ast_make_superexpr(TinState *state, size_t line, TinString *method, bool ignoreresult);
TinAstRangeExpr *tin_ast_make_rangeexpr(TinState *state, size_t line, TinAstExpression *from, TinAstExpression *to);
TinAstTernaryExpr *tin_ast_make_ternaryexpr(TinState *state, size_t line, TinAstExpression *condition, TinAstExpression *ifbranch, TinAstExpression *elsebranch);
TinAstStrInterExpr *tin_ast_make_strinterpolexpr(TinState *state, size_t line);
TinAstRefExpr *tin_ast_make_referenceexpr(TinState *state, size_t line, TinAstExpression *to);
TinAstExprExpr *tin_ast_make_exprstmt(TinState *state, size_t line, TinAstExpression *expression);
TinAstBlockExpr *tin_ast_make_blockexpr(TinState *state, size_t line);
TinAstAssignVarExpr *tin_ast_make_assignvarexpr(TinState *state, size_t line, const char *name, size_t length, TinAstExpression *init, bool constant);
TinAstIfExpr *tin_ast_make_ifexpr(TinState *state, size_t line, TinAstExpression *condition, TinAstExpression *ifbranch, TinAstExpression *elsebranch, TinAstExprList *elseifconditions, TinAstExprList *elseifbranches);
TinAstWhileExpr *tin_ast_make_whileexpr(TinState *state, size_t line, TinAstExpression *condition, TinAstExpression *body);
TinAstForExpr *tin_ast_make_forexpr(TinState *state, size_t line, TinAstExpression *init, TinAstExpression *var, TinAstExpression *condition, TinAstExpression *increment, TinAstExpression *body, bool cstyle);
TinAstContinueExpr *tin_ast_make_continueexpr(TinState *state, size_t line);
TinAstBreakExpr *tin_ast_make_breakexpr(TinState *state, size_t line);
TinAstFunctionExpr *tin_ast_make_funcexpr(TinState *state, size_t line, const char *name, size_t length);
TinAstReturnExpr *tin_ast_make_returnexpr(TinState *state, size_t line, TinAstExpression *expression);
TinAstMethodExpr *tin_ast_make_methodexpr(TinState *state, size_t line, TinString *name, bool isstatic);
TinAstClassExpr *tin_ast_make_classexpr(TinState *state, size_t line, TinString *name, TinString *parent);
TinAstFieldExpr *tin_ast_make_fieldexpr(TinState *state, size_t line, TinString *name, TinAstExpression *getter, TinAstExpression *setter, bool isstatic);
TinAstExprList *tin_ast_allocexprlist(TinState *state);
void tin_ast_destroy_allocdexprlist(TinState *state, TinAstExprList *expressions);
TinAstExprList *tin_ast_allocate_stmtlist(TinState *state);
void tin_ast_destry_allocdstmtlist(TinState *state, TinAstExprList *statements);
/* ccemit.c */
void tin_privlist_init(TinAstPrivList *array);
void tin_privlist_destroy(TinState *state, TinAstPrivList *array);
void tin_privlist_push(TinState *state, TinAstPrivList *array, TinAstPrivate value);
void tin_loclist_init(TinAstLocList *array);
void tin_loclist_destroy(TinState *state, TinAstLocList *array);
void tin_loclist_push(TinState *state, TinAstLocList *array, TinAstLocal value);
void tin_astemit_init(TinState *state, TinAstEmitter *emitter);
void tin_astemit_destroy(TinAstEmitter *emitter);
TinModule *tin_astemit_modemit(TinAstEmitter *emitter, TinAstExprList *statements, TinString *module_name);
/* ccopt.c */
void tin_astopt_optdbg(const char *fmt, ...);
void tin_varlist_init(TinVarList *array);
void tin_varlist_destroy(TinState *state, TinVarList *array);
void tin_varlist_push(TinState *state, TinVarList *array, TinVariable value);
void tin_astopt_init(TinState *state, TinAstOptimizer *optimizer);
void tin_astopt_optast(TinAstOptimizer *optimizer, TinAstExprList *statements);
bool tin_astopt_isoptenabled(TinAstOptType optimization);
void tin_astopt_setoptenabled(TinAstOptType optimization, bool enabled);
void tin_astopt_setalloptenabled(bool enabled);
void tin_astopt_setoptlevel(TinAstOptLevel level);
const char *tin_astopt_getoptname(TinAstOptType optimization);
const char *tin_astopt_getoptdescr(TinAstOptType optimization);
const char *tin_astopt_getoptleveldescr(TinAstOptLevel level);
/* ccparser.c */
const char *tin_astparser_token2name(int t);
void tin_astparser_init(TinState *state, TinAstParser *parser);
void tin_astparser_destroy(TinAstParser *parser);
bool tin_astparser_parsesource(TinAstParser *parser, const char *filename, const char *source, TinAstExprList *statements);
/* ccscan.c */
void tin_bytelist_init(TinAstByteList *bl);
void tin_bytelist_destroy(TinState *state, TinAstByteList *bl);
void tin_bytelist_push(TinState *state, TinAstByteList *bl, uint8_t value);
void tin_astlex_init(TinState *state, TinAstScanner *scanner, const char *filename, const char *source);
TinAstToken tin_astlex_scantoken(TinAstScanner *scanner);
/* chunk.c */
void tin_chunk_init(TinChunk *chunk);
void tin_chunk_destroy(TinState *state, TinChunk *chunk);
void tin_chunk_push(TinState *state, TinChunk *chunk, uint8_t byte, uint16_t line);
size_t tin_chunk_addconst(TinState *state, TinChunk *chunk, TinValue constant);
size_t tin_chunk_getline(TinChunk *chunk, size_t offset);
void tin_chunk_shrink(TinState *state, TinChunk *chunk);
void tin_chunk_emitbyte(TinState *state, TinChunk *chunk, uint8_t byte);
void tin_chunk_emit2bytes(TinState *state, TinChunk *chunk, uint8_t a, uint8_t b);
void tin_chunk_emitshort(TinState *state, TinChunk *chunk, uint16_t value);
/* debug.c */
void tin_disassemble_module(TinState *state, TinModule *module, const char *source);
void tin_disassemble_chunk(TinState *state, TinChunk *chunk, const char *name, const char *source);
size_t tin_disassemble_instruction(TinState *state, TinChunk *chunk, size_t offset, const char *source);
void tin_trace_frame(TinFiber *fiber, TinWriter *wr);
/* gcmem.c */
TinObject *tin_gcmem_allocobject(TinState *state, size_t size, TinObjType type, bool islight);
void *tin_gcmem_memrealloc(TinState *state, void *pointer, size_t oldsize, size_t newsize);
void tin_gcmem_marktable(TinVM *vm, TinTable *table);
void tin_gcmem_markobject(TinVM *vm, TinObject *object);
void tin_gcmem_markvalue(TinVM *vm, TinValue value);
void tin_gcmem_vmmarkroots(TinVM *vm);
void tin_gcmem_markarray(TinVM *vm, TinValList *array);
void tin_gcmem_vmblackobject(TinVM *vm, TinObject *object);
void tin_gcmem_vmtracerefs(TinVM *vm);
void tin_gcmem_vmsweep(TinVM *vm);
uint64_t tin_gcmem_collectgarbage(TinVM *vm);
void tin_open_gc_library(TinState *state);
/* main.c */
int exitstate(TinState *state, TinStatus result);
void interupt_handler(int signalid);
int main(int argc, char *argv[]);
/* modarray.c */
void tin_datalist_init(TinDataList *dl, size_t typsz);
void tin_datalist_destroy(TinState *state, TinDataList *dl);
size_t tin_datalist_count(TinDataList *dl);
size_t tin_datalist_size(TinDataList *dl);
size_t tin_datalist_capacity(TinDataList *dl);
void tin_datalist_clear(TinDataList *dl);
void tin_datalist_setcount(TinDataList *dl, size_t nc);
void tin_datalist_deccount(TinDataList *dl);
intptr_t tin_datalist_get(TinDataList *dl, size_t idx);
intptr_t tin_datalist_set(TinDataList *dl, size_t idx, intptr_t val);
void tin_datalist_push(TinState *state, TinDataList *dl, intptr_t value);
void tin_datalist_ensuresize(TinState *state, TinDataList *dl, size_t size);
void tin_vallist_init(TinValList *vl);
void tin_vallist_destroy(TinState *state, TinValList *vl);
size_t tin_vallist_size(TinValList *vl);
size_t tin_vallist_count(TinValList *vl);
size_t tin_vallist_capacity(TinValList *vl);
void tin_vallist_setcount(TinValList *vl, size_t nc);
void tin_vallist_clear(TinValList *vl);
void tin_vallist_deccount(TinValList *vl);
void tin_vallist_ensuresize(TinState *state, TinValList *vl, size_t size);
TinValue tin_vallist_set(TinValList *vl, size_t idx, TinValue val);
TinValue tin_vallist_get(TinValList *vl, size_t idx);
void tin_vallist_push(TinState *state, TinValList *vl, TinValue value);
TinArray *tin_object_makearray(TinState *state);
size_t tin_array_count(TinArray *arr);
TinValue tin_array_pop(TinState *state, TinArray *arr);
int tin_array_indexof(TinArray *array, TinValue value);
TinValue tin_array_removeat(TinArray *array, size_t index);
void tin_array_push(TinState *state, TinArray *array, TinValue val);
TinValue tin_array_get(TinState *state, TinArray *array, size_t idx);
void tin_array_set(TinState *state, TinArray *array, size_t idx, TinValue val);
TinArray *tin_array_splice(TinState *state, TinArray *oa, int from, int to);
void tin_open_array_library(TinState *state);
/* modclass.c */
TinClass *tin_object_makeclass(TinState *state, TinString *name);
TinClass *tin_object_makeclassname(TinState *state, const char *name);
TinField *tin_object_makefield(TinState *state, TinObject *getter, TinObject *setter);
TinInstance *tin_object_makeinstance(TinState *state, TinClass *klass);
void tin_class_bindconstructor(TinState *state, TinClass *cl, TinNativeMethodFn fn);
TinNativeMethod *tin_class_bindmethod(TinState *state, TinClass *cl, const char *name, TinNativeMethodFn fn);
TinPrimitiveMethod *tin_class_bindprimitive(TinState *state, TinClass *cl, const char *name, TinPrimitiveMethodFn fn);
TinNativeMethod *tin_class_bindstaticmethod(TinState *state, TinClass *cl, const char *name, TinNativeMethodFn fn);
TinPrimitiveMethod *tin_class_bindstaticprimitive(TinState *state, TinClass *cl, const char *name, TinPrimitiveMethodFn fn);
void tin_class_setstaticfield(TinState *state, TinClass *cl, const char *name, TinValue val);
TinField *tin_class_bindgetset(TinState *state, TinClass *cl, const char *name, TinNativeMethodFn getfn, TinNativeMethodFn setfn, bool isstatic);
void tin_class_inheritfrom(TinState *state, TinClass *current, TinClass *other);
void tin_open_class_library(TinState *state);
/* modcore.c */
void tin_open_libraries(TinState *state);
void util_custom_quick_sort(TinVM *vm, TinValue *l, int length, TinValue callee);
bool util_is_fiber_done(TinFiber *fiber);
void util_run_fiber(TinVM *vm, TinFiber *fiber, TinValue *argv, size_t argc, bool catcher);
void util_basic_quick_sort(TinState *state, TinValue *clist, int length);
bool util_interpret(TinVM *vm, TinModule *module);
bool util_test_file_exists(const char *filename);
TinValue util_invalid_constructor(TinVM *vm, TinValue instance, size_t argc, TinValue *argv);
void tin_open_core_library(TinState *state);
/* modfiber.c */
TinFiber *tin_object_makefiber(TinState *state, TinModule *module, TinFunction *function);
void tin_fiber_ensurestack(TinState *state, TinFiber *fiber, size_t needed);
void tin_open_fiber_library(TinState *state);
/* modfs.c */
bool tin_fs_diropen(TinDirReader *rd, const char *path);
bool tin_fs_dirread(TinDirReader *rd, TinDirItem *itm);
bool tin_fs_dirclose(TinDirReader *rd);
char *tin_util_readfile(const char *path, size_t *dlen);
bool tin_fs_fileexists(const char *path);
bool tin_fs_direxists(const char *path);
size_t tin_ioutil_writeuint8(FILE *fh, uint8_t byte);
size_t tin_ioutil_writeuint16(FILE *fh, uint16_t byte);
size_t tin_ioutil_writeuint32(FILE *fh, uint32_t byte);
size_t tin_ioutil_writedouble(FILE *fh, double byte);
size_t tin_ioutil_writestring(FILE *fh, TinString *string);
uint8_t tin_ioutil_readuint8(FILE *fh);
uint16_t tin_ioutil_readuint16(FILE *fh);
uint32_t tin_ioutil_readuint32(FILE *fh);
double tin_ioutil_readdouble(FILE *fh);
TinString *tin_ioutil_readstring(TinState *state, FILE *fh);
void tin_emufile_init(TinEmulatedFile *femu, const char *source, size_t len);
uint8_t tin_emufile_readuint8(TinEmulatedFile *femu);
uint16_t tin_emufile_readuint16(TinEmulatedFile *femu);
uint32_t tin_emufile_readuint32(TinEmulatedFile *femu);
double tin_emufile_readdouble(TinEmulatedFile *femu);
TinString *tin_emufile_readstring(TinState *state, TinEmulatedFile *femu);
void tin_ioutil_writemodule(TinModule *module, FILE *fh);
TinModule *tin_ioutil_readmodule(TinState *state, const char *input, size_t len);
void tin_userfile_cleanup(TinState *state, TinUserdata *data, bool mark);
void tin_open_file_library(TinState *state);
/* modfunc.c */
TinFunction *tin_object_makefunction(TinState *state, TinModule *module);
TinClosure *tin_object_makeclosure(TinState *state, TinFunction *function);
TinNativeFunction *tin_object_makenativefunction(TinState *state, TinNativeFunctionFn function, TinString *name);
TinNativePrimFunction *tin_object_makenativeprimitive(TinState *state, TinNativePrimitiveFn function, TinString *name);
TinNativeMethod *tin_object_makenativemethod(TinState *state, TinNativeMethodFn method, TinString *name);
TinPrimitiveMethod *tin_object_makeprimitivemethod(TinState *state, TinPrimitiveMethodFn method, TinString *name);
TinBoundMethod *tin_object_makeboundmethod(TinState *state, TinValue receiver, TinValue method);
bool tin_value_iscallablefunction(TinValue value);
void tin_state_openfunctionlibrary(TinState *state);
/* modmap.c */
void tin_table_init(TinState *state, TinTable *table);
void tin_table_destroy(TinState *state, TinTable *table);
bool tin_table_set(TinState *state, TinTable *table, TinString *key, TinValue value);
bool tin_table_get(TinTable *table, TinString *key, TinValue *value);
bool tin_table_get_slot(TinTable *table, TinString *key, TinValue **value);
bool tin_table_delete(TinTable *table, TinString *key);
TinString *tin_table_find_string(TinTable *table, const char *chars, size_t length, uint32_t hash);
void tin_table_add_all(TinState *state, TinTable *from, TinTable *to);
void tin_table_removewhite(TinTable *table);
int util_table_iterator(TinTable *table, int number);
TinValue util_table_iterator_key(TinTable *table, int index);
TinMap *tin_object_makemap(TinState *state);
bool tin_map_set(TinState *state, TinMap *map, TinString *key, TinValue value);
bool tin_map_setstr(TinState *state, TinMap *map, const char *str, TinValue value);
bool tin_map_get(TinMap *map, TinString *key, TinValue *value);
bool tin_map_delete(TinMap *map, TinString *key);
void tin_map_add_all(TinState *state, TinMap *from, TinMap *to);
void tin_open_map_library(TinState *state);
/* modmath.c */
void tin_open_math_library(TinState *state);
/* modmodule.c */
void tin_open_module_library(TinState *state);
/* modobject.c */
TinUpvalue *tin_object_makeupvalue(TinState *state, TinValue *slot);
TinModule *tin_object_makemodule(TinState *state, TinString *name);
TinUserdata *tin_object_makeuserdata(TinState *state, size_t size, bool ispointeronly);
TinReference *tin_object_makereference(TinState *state, TinValue *slot);
void tin_object_destroy(TinState *state, TinObject *object);
void tin_object_destroylistof(TinState *state, TinObject *objects);
TinValue tin_function_getname(TinVM *vm, TinValue instance);
void tin_state_openobjectlibrary(TinState *state);
/* modrange.c */
TinRange *tin_object_makerange(TinState *state, double from, double to);
void tin_open_range_library(TinState *state);
/* modstring.c */
char *itoa(int value, char *result, int base);
char *tin_util_inttostring(char *dest, size_t n, int x);
uint32_t tin_util_hashstring(const char *key, size_t length);
int tin_util_decodenumbytes(uint8_t byte);
int tin_ustring_length(TinString *string);
TinString *tin_ustring_codepointat(TinState *state, TinString *string, uint32_t index);
TinString *tin_ustring_fromcodepoint(TinState *state, int value);
TinString *tin_ustring_fromrange(TinState *state, TinString *source, int start, uint32_t count);
int tin_util_encodenumbytes(int value);
int tin_ustring_encode(int value, uint8_t *bytes);
int tin_ustring_decode(const uint8_t *bytes, uint32_t length);
int tin_util_ucharoffset(char *str, int index);
TinString *tin_string_makeempty(TinState *state, size_t length, bool reuse);
TinString *tin_string_makelen(TinState *state, char *chars, size_t length, uint32_t hash, bool wassds, bool reuse);
void tin_state_regstring(TinState *state, TinString *string);
TinString *tin_string_take(TinState *state, char *chars, size_t length, bool wassds);
TinString *tin_string_copy(TinState *state, const char *chars, size_t length);
const char *tin_string_getdata(TinString *ls);
size_t tin_string_getlength(TinString *ls);
void tin_string_appendlen(TinString *ls, const char *s, size_t len);
void tin_string_appendobj(TinString *ls, TinString *other);
void tin_string_appendchar(TinString *ls, char ch);
TinValue tin_string_numbertostring(TinState *state, double value);
TinValue tin_string_format(TinState *state, const char *format, ...);
bool tin_string_equal(TinState *state, TinString *a, TinString *b);
bool check_fmt_arg(TinVM *vm, char *buf, size_t ai, size_t argc, TinValue *argv, const char *fmttext);
void tin_open_string_library(TinState *state);
/* state.c */
TinString *tin_vformat_error(TinState *state, size_t line, const char *fmt, va_list args);
TinString *tin_format_error(TinState *state, size_t line, const char *fmt, ...);
void tin_enable_compilation_time_measurement(void);
TinState *tin_make_state(void);
int64_t tin_destroy_state(TinState *state);
void tin_api_init(TinState *state);
void tin_api_destroy(TinState *state);
TinValue tin_state_getglobalvalue(TinState *state, TinString *name);
TinFunction *tin_state_getglobalfunction(TinState *state, TinString *name);
void tin_state_setglobal(TinState *state, TinString *name, TinValue value);
bool tin_state_hasglobal(TinState *state, TinString *name);
void tin_state_defnativefunc(TinState *state, const char *name, TinNativeFunctionFn native);
void tin_state_defnativeprimitive(TinState *state, const char *name, TinNativePrimitiveFn native);
TinValue tin_state_getinstancemethod(TinState *state, TinValue callee, TinString *mthname);
TinInterpretResult tin_state_callinstancemethod(TinState *state, TinValue callee, TinString *mthname, TinValue *argv, size_t argc);
TinValue tin_state_getfield(TinState *state, TinTable *table, const char *name);
TinValue tin_state_getmapfield(TinState *state, TinMap *map, const char *name);
void tin_state_setfield(TinState *state, TinTable *table, const char *name, TinValue value);
void tin_state_setmapfield(TinState *state, TinMap *map, const char *name, TinValue value);
bool tin_state_ensurefiber(TinVM *vm, TinFiber *fiber);
TinInterpretResult tin_state_callfunction(TinState *state, TinFunction *callee, TinValue *argv, uint8_t argc, bool ignfiber);
TinInterpretResult tin_state_callclosure(TinState *state, TinClosure *callee, TinValue *argv, uint8_t argc, bool ignfiber);
TinInterpretResult tin_state_callmethod(TinState *state, TinValue instance, TinValue callee, TinValue *argv, uint8_t argc, bool ignfiber);
TinInterpretResult tin_state_callvalue(TinState *state, TinValue callee, TinValue *argv, uint8_t argc, bool ignfiber);
TinInterpretResult tin_state_findandcallmethod(TinState *state, TinValue callee, TinString *mthname, TinValue *argv, uint8_t argc, bool ignfiber);
void tin_state_pushroot(TinState *state, TinObject *object);
void tin_state_pushvalueroot(TinState *state, TinValue value);
TinValue tin_state_peekroot(TinState *state, uint8_t distance);
void tin_state_poproot(TinState *state);
void tin_state_poproots(TinState *state, uint8_t amount);
TinClass *tin_state_getclassfor(TinState *state, TinValue value);
TinModule *tin_state_compilemodule(TinState *state, TinString *module_name, const char *code, size_t len);
TinModule *tin_state_getmodule(TinState *state, const char *name);
TinInterpretResult tin_state_execsource(TinState *state, const char *module_name, const char *code, size_t len);
TinInterpretResult tin_state_internexecsource(TinState *state, TinString *module_name, const char *code, size_t len);
bool tin_state_compileandsave(TinState *state, char *files[], size_t numfiles, const char *outputfile);
TinInterpretResult tin_state_execfile(TinState *state, const char *file);
TinInterpretResult tin_state_dumpfile(TinState *state, const char *file);
void tin_state_raiseerror(TinState *state, TinErrType type, const char *message, ...);
void tin_state_printf(TinState *state, const char *message, ...);
/* util.c */
uint64_t pack754(long double f, unsigned bits, unsigned expbits);
long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
double tin_util_uinttofloat(unsigned int val);
unsigned int tin_util_floattouint(double val);
int tin_util_doubletoint(double n);
int tin_util_numbertoint32(double n);
unsigned int tin_util_numbertouint32(double n);
int tin_util_closestpowof2(int n);
char *tin_util_patchfilename(char *filename);
char *tin_util_copystring(const char *string);
/* value.c */
TinValue tin_value_fromobject_actual(TinObject *obj);
TinObject *tin_value_asobject(TinValue v);
TinValue tin_value_makebool(TinState *state, bool b);
TinObjType tin_value_type(TinValue v);
TinValue tin_value_makenumber(TinState *state, double num);
TinValue tin_value_makefloatnumber(TinState *state, double num);
TinValue tin_value_makefixednumber(TinState *state, int64_t num);
bool tin_valcompare_object(TinState *state, const TinValue a, const TinValue b);
bool tin_value_compare(TinState *state, const TinValue a, const TinValue b);
TinString *tin_value_tostring(TinState *state, TinValue object);
double tin_args_checknumber(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
double tin_value_getnumber(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id, double def);
bool tin_args_checkbool(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
bool tin_value_getbool(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id, bool def);
const char *tin_args_checkstring(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
const char *tin_value_getstring(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id, const char *def);
TinString *tin_args_checkobjstring(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
TinInstance *tin_args_checkinstance(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
TinValue *tin_args_checkreference(TinVM *vm, TinValue *args, uint8_t arg_count, uint8_t id);
void tin_value_ensurebool(TinVM *vm, TinValue value, const char *emsg);
void tin_value_ensurestring(TinVM *vm, TinValue value, const char *emsg);
void tin_value_ensurenumber(TinVM *vm, TinValue value, const char *emsg);
void tin_value_ensureobjtype(TinVM *vm, TinValue value, TinObjType type, const char *emsg);
TinValue tin_value_callnew(TinVM *vm, const char *name, TinValue *args, size_t argc, bool ignfiber);
/* vm.c */
uint16_t tin_vmintern_readshort(TinExecState *est);
uint8_t tin_vmintern_readbyte(TinExecState *est);
TinValue tin_vmintern_readconstant(TinExecState *est);
TinValue tin_vmintern_readconstantlong(TinExecState *est);
TinString *tin_vmintern_readstring(TinExecState *est);
TinString *tin_vmintern_readstringlong(TinExecState *est);
void tin_vmintern_push(TinExecState *est, TinValue v);
TinValue tin_vmintern_pop(TinExecState *est);
void tin_vmintern_drop(TinExecState *est);
void tin_vmintern_dropn(TinExecState *est, int amount);
TinValue tin_vmintern_peek(TinExecState *est, short distance);
void tin_vmintern_readframe(TinExecState *est);
void tin_vmintern_writeframe(TinExecState *est, uint8_t *ip);
void tin_vmintern_resetstack(TinVM *vm);
void tin_vmintern_resetvm(TinState *state, TinVM *vm);
void tin_vm_init(TinState *state, TinVM *vm);
void tin_vm_destroy(TinVM *vm);
void tin_vm_callexitjump(TinVM *vm);
bool tin_vm_setexitjump(TinVM *vm);
void tin_vmintern_tracestack(TinVM *vm, TinWriter *wr);
bool tin_vm_handleruntimeerror(TinVM *vm, TinString *errorstring);
bool tin_vm_vraiseerror(TinVM *vm, const char *format, va_list args);
bool tin_vm_raiseerror(TinVM *vm, const char *format, ...);
bool tin_vm_raiseexitingerror(TinVM *vm, const char *format, ...);
bool tin_vm_callcallable(TinVM *vm, TinFunction *function, TinClosure *closure, uint8_t argc);
const char *tin_vmintern_funcnamefromvalue(TinExecState *est, TinValue v);
bool tin_vm_callvalue(TinExecState *est, TinValue callee, uint8_t argc);
TinUpvalue *tin_vmintern_captureupvalue(TinState *state, TinValue *local);
void tin_vmintern_closeupvalues(TinVM *vm, const TinValue *last);
TinInterpretResult tin_vm_execmodule(TinState *state, TinModule *module);
bool tin_vmdo_call(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_fieldget(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_fieldset(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_range(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_makeclosure(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_makeclass(TinExecState *est, TinValue *finalresult);
bool tin_vmdo_makemethod(TinExecState *est, TinValue *finalresult);
TinInterpretResult tin_vm_execfiber(TinState *state, TinFiber *fiber);
bool tin_vmintern_execfiber(TinState *exstate, TinFiber *exfiber, TinValue *finalresult);
/* writer.c */
void tin_writer_init_file(TinState *state, TinWriter *wr, FILE *fh, bool forceflush);
void tin_writer_init_string(TinState *state, TinWriter *wr);
void tin_writer_writebyte(TinWriter *wr, int byte);
void tin_writer_writestringl(TinWriter *wr, const char *str, size_t len);
void tin_writer_writestring(TinWriter *wr, const char *str);
void tin_writer_writeformat(TinWriter *wr, const char *fmt, ...);
void tin_writer_writeescapedbyte(TinWriter *wr, int ch);
void tin_writer_writeescapedstring(TinWriter *wr, const char *str, size_t len, bool withquot);
TinString *tin_writer_get_string(TinWriter *wr);
void tin_towriter_array(TinState *state, TinWriter *wr, TinArray *array, size_t size);
void tin_towriter_map(TinState *state, TinWriter *wr, TinMap *map, size_t size);
void tin_towriter_functail(TinState *state, TinWriter *wr, TinString *name, TinModule *mod, const char *suffix);
void tin_towriter_object(TinState *state, TinWriter *wr, TinValue value, bool withquot);
void tin_towriter_value(TinState *state, TinWriter *wr, TinValue value, bool withquot);
const char *tin_tostring_typename(TinValue value);
const char *tin_tostring_exprtype(TinAstExprType t);
const char *tin_tostring_optok(TinAstTokType t);
void tin_astwriter_init(TinState *state, TinAstWriterState *aw, TinWriter *wr);
void tin_astwriter_putindent(TinAstWriterState *aw);
void tin_astwriter_funcdecl(TinAstWriterState *aw, TinAstExpression *expr, bool islambda);
void tin_astwriter_expr(TinAstWriterState *aw, TinAstExpression *expr);
void tin_towriter_ast(TinState *state, TinWriter *wr, TinAstExprList *exlist);
